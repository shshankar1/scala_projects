package module2.example

import org.apache.spark.{SparkConf, SparkContext}
import util.Files

/**
  * This will be used to build the invereted index file from
  * the output file generated by crawler
  */
object InvertedIndexBuilder {
  def main(args: Array[String]): Unit = {
    val inputPath = "output/crawl"
    val outputPath = "output/inverted-index"

    Files.rmrf(outputPath)

    val conf = new SparkConf().setAppName("Invereted Index Builder").setMaster("local")
    val sparkContext = new SparkContext(conf)
    try {
      val lineRE = """^\s*\(([^,]+),(.*)\)\s*$""".r

      val input = sparkContext.textFile(inputPath).map {
        case lineRE(fileName, text) => (fileName.trim, text.toLowerCase)
        case badLine =>
          Console.err.print(s"Unexpected bad line: $badLine")
          ("", "")
      }

      println(s"Writing output to $outputPath")

      input.flatMap {
        case (path, text) =>
          text.trim.split("""[^\w']""").map(word => ((word, path), 1))
      }.reduceByKey {
        (count1, count2) => count1 + count2
      }.map {
        case ((word, path), n) => (word, (path, n))
      }.groupByKey
        .map {
          case (word, iterable) => (word, iterable.mkString(", "))
        }.saveAsTextFile(outputPath)
    } finally {
      println("Enter any key to exit:")
      Console.in.read()
    }
  }
}